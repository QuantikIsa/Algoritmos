0.- COMPONENTES DEL GRUPO DE PRÁCTICAS:

Grupo 2.2

Isabel Villar García (i.villar)
Nuria García García (n.ggarcia)
Miguel Magdalena Sánchez (m.magdalenas)



1.- INTRODUCCIÓN: 
	El objetivo de esta práctica es comprobar empíricamente el análisis teórico de la eficiencia de dos algoritmos usados para calcular la suma máxima de una secuencia de números
	enteros.
  
	Lo primero que haremos será traducir el pseudocódigo de los algoritmos a código c. Para comprobar su funcionamiento, realizaremos una 
	serie de tests en los cuales comprobaremos el correcto funcionamiento de la implementación de cada uno de los algoritmos en dicho lenguaje.
  
	Una vez realizadas las pruebas y comprobado que los algoritmos funcionan, dando ambos el mismo resultado, realizaremos las pruebas empíricas, obteniendo en estas las cotas:
	ajustada, sobrestimada y subestimada acordes con los resultados. Definidas las cuales finalizaremos la práctica presentando nuestras conclusiones.



2.- MEDICIONES
	Para realizar las mediciones utilizamos una partición de Ubuntu 24.04.3 LTS en un portátil con las siguientes características:

	Modelo: Modern 14 C13M	
	Memoria RAM:  16,0 GiB
	Procesador: 13th Gen Intel® Core™ i7-1355U × 12
    	Reloj: 1.70 GHz
	
      
      Debemos destacar que repetimos varias veces las mediciones y que en cada una de ellas, por cada algoritmo, imprimimos por pantalla 5 veces su 
      tabla de tiempos quedándonos con la mejor.
      Las unidades de tiempo utilizadas son microsegundos y el tamaño de las entradas sigue una progresión geométrica de razón 2, empezando en 500 para
ambos algoritmos (SumaSubMax1 y SumaSubMax2). Eso sí, en el primero de ellos terminamos las mediciones en 32000, mientras que en el segundo lo hacemos en 256000.
      


3.- COMPROBACIÓN DEL CORRECTO FUNCIONAMIENTO DE LOS ALGORITMOS:

Test 1 (Vector predeterminado)
				sumaSubMax1	sumaSubMax2
[  -9   2  -5  -4   6  ]                  6               6
[   4   0   9   2   5  ]                 20              20
[  -2  -1  -9  -7  -1  ]                  0               0
[   9  -2   1  -7  -8  ]                  9               9
[  15  -2  -5  -4  16  ]                 20              20
[   7  -5   6   7  -7  ]                 15              15

Test 2 (Vector de números aleatorios)
                                                sumaSubMax1     sumaSubMax2
[  -4   4   0   2   3   3  -9   6  -9  ]                 12              12
[   6  -2  -7  -9   9  -9  -2  -9   7  ]                  9               9
[   7   6  -8  -4   7  -7  -3   7   2  ]                 13              13
[  -7   8   0  -3  -9  -6   3   2   3  ]                  8               8
[  -4  -1  -1  -7  -5   4  -5  -8   3  ]                  4               4
[  -4  -4   0  -7  -6  -4  -5  -1  -9  ]                  0               0
[  -6   5   7   5   4   2  -8  -9   2  ]                 23              23
[  -7   0  -6   5   6  -1  -8   8   3  ]                 13              13
[   5  -9   2  -5  -7   7   4  -5   7  ]                 13              13
[   9  -4  -4   6  -1   7   1  -8   2  ]                 14              14


4.- ALGORITMOS DE SUMA DE LA SUBSECUENCIA MÁXIMA:

SumaSubMax1----------------------

        n             t(n)        t(n)/n^1.8            t(n)/n^2        t(n)/n^2.2
(*)    500         198.192          0.002748            0.000793          0.000229
      1000         806.000          0.003209            0.000806          0.000202
      2000        3249.000          0.003714            0.000812          0.000178
      4000       12858.000          0.004221            0.000804          0.000153
      8000       51380.000          0.004844            0.000803          0.000133
     16000      206893.000          0.005602            0.000808          0.000117
     32000      836849.000          0.006507            0.000817          0.000103
				cota subestimada      cota ajustada   cota sobrestimada
				     		      tiende a una 			
				    		      cnt = 0.000812

	·OBSERVACIONES:
		La cota n^1.8 diverge cuando n tiende a infinito, dando lugar a una cota subestimada. Ésta realiza un constate incremento de su valor. En caso de la cota n^2.2 ocurre
		lo contrario, sus valores disminuyen su valor progresivamente tratándose por lo tanto de una cota sobrestimada. Finalmente, la cota n^2 mantiene constantes sus
		valores, debemos definirla por lo tanto como una cota ajustada.


SumaSubMax2----------------------

            n            t(n)        t(n)/n^0.8              t(n)/n       t(n)/(nlog(n))
(*)       500           1.357          0.009406            0.002714            0.000437
(*)      1000           2.420          0.009634            0.002420            0.000350
(*)      2000           4.445          0.010164            0.002223            0.000292
(*)      4000           8.470          0.011123            0.002117            0.000255
(*)      8000          16.226          0.012239            0.002028            0.000226
(*)     16000          32.262          0.013976            0.002016            0.000208
(*)     32000          62.851          0.015638            0.001964            0.000189
(*)     64000         123.892          0.017705            0.001936            0.000175
(*)    128000         243.893          0.020018            0.001905            0.000162
(*)    256000         487.443          0.022979            0.001904            0.000153
				   cota subestimada     cota ajustada    cota sobrestimada
					 		tiende a una 			
							cnt =0.001903

	·OBSERVACIONES:
		A medida que n tiende a infinito las distintas cotas se comportan de la siguiente forma en este algoritmo: n^0.8 aumenta sus valores, siendo ésta la cota 
		subestimada. En el caso de n, ésta sería la cota ajustada al mantener constante sus valores. Finalmente nlog(n) decrece sus valores siendo esta la cota 
		sobrestimada.
		
(*) Tiempo promedio en 1000 ejecuciones del algoritmo.

 
5.- CONCLUSIONES

Las cotas obtenidas con los algoritmos son acordes con las que se nos proporcionaron en clase.
Con los tiempos obtenidos corroboramos la mayor eficiencia del algoritmo 2 (SumaSubMax2), que obtiene tiempos mucho más pequeños que en el caso del algoritmo 1 (SumaSubMax1), como por ejemplo: n = 1000 en SumaSubMax1 es mayor (806.000) que en n = 256000 en el caso de SumaSubMax2 (487.443).





